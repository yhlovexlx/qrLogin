<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 自动扫描的包，除了控制器  -->
	<context:component-scan base-package="cn.jsxwsl.maven.ssm">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>

	<!-- 数据原 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.db}?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="10" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

	</bean>
	
	<!-- mybatis sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="configLocation" value="classpath:/SqlMapConfig.xml" />
		<!-- 通配符指定Mapper.xml -->
		<property name="mapperLocations" value="classpath:/mapper/*Mapper.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="cn.jsxwsl.maven.ssm.bean" />
	</bean>

	<!-- 提供sqlsession  -->
	<bean id="sqlSessionMain" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 匹配接口的方式 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.jsxwsl.maven.ssm.dao"></property>
	</bean>
	-->
	
	<!-- 事务  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	

	<!-- 1.基于注解的事务-->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> --> 
	<!-- 2.aop控制事务 		-->
	<aop:config>
		<!-- 数据库事务切入点表达式 -->
		<aop:pointcut id="aop_cut_data" 
		 	expression="execution(* cn.jsxwsl.maven.ssm.service..*(..))"/>
		<!-- 增强事务	 -->
		<aop:advisor advice-ref="tx_advice_service" pointcut-ref="aop_cut_data" />
	</aop:config>
	<!-- 增强事务配置  -->
	<tx:advice id="tx_advice_service">
		<tx:attributes>
			<tx:method name="update*" /> 
			<tx:method name="query*" read-only="true" /> 
		</tx:attributes>
	</tx:advice>
	
	
</beans>
